<template>
  <div class="page" style="padding-bottom: 24px">
    <!-- <text class="page-title">{{ cityName }}</text> -->
    <text class="page-subtitle">{{ updateTime }}</text>

    <div class="hero-content">
      <image class="icon-weather" src="/common/weather/weather_{{ iconCode }}.png" />
      <!-- <text class="temperature">{{ temperature }}</text> -->
      <text class="temp-min-max">{{ tempMinMax }}</text>
    </div>

    <div class="page-list" style="margin-top: 28px">
      <div style="margin-top: -2px; flex-direction: column">
        <div style="margin-top: 14px; flex-direction: column" for="{{ item in figure }}">
          <text class="figure-desc">{{ item.value }}</text>
          <text class="figure-title">{{ item.name }}</text>
        </div>
      </div>
    </div>

    <div class="page-list" style="margin-top: 12px">
      <div style="margin-top: -8px; flex-direction: column">
        <div style="margin-top: 20px; flex-direction: column" for="{{ item in dayWeather }}">
          <text class="day-weather-title">{{ item.name }}</text>
          <div style="justify-content: space-between">
            <text class="day-weather-desc">{{ item.tempMinMax }}</text>
            <image
              class="small-weather-icon"
              src="/common/weather/weather_{{ item.iconCode }}.png"
            />
          </div>
        </div>
      </div>
    </div>

    <!-- <div class="hero-content" style="margin-top: 24px">
      <div class="button" onclick="Detail()">
        <text class="button-text">查看更多</text>
      </div>
    </div> -->
  </div>
</template>

<script>
// import router from "@system.router"
import interconnect from "@system.interconnect"
import file from "@system.file"
import {showToast} from "@system.prompt"

const connect = interconnect.instance()

export default {
  private: {
    updateTime: "__",
    iconCode: "__",
    tempMinMax: "__°/__°",
    figure: [
      {name: "紫外线指数", value: "__", uniqueId: 1},
      {name: "相对湿度 （%）", value: "__", uniqueId: 2},
      {name: "__", value: "__", uniqueId: 3},
      {name: "气压 （hPa）", value: "__", uniqueId: 4}
    ],
    dayWeather: [
      {name: "今天", tempMinMax: "__", iconCode: "__", uniqueId: 1},
      {name: "明天", tempMinMax: "__", iconCode: "__", uniqueId: 2},
      {name: "后天", tempMinMax: "__", iconCode: "__", uniqueId: 3},
      {name: "__", tempMinMax: "__", iconCode: "__", uniqueId: 4},
      {name: "__", tempMinMax: "__", iconCode: "__", uniqueId: 5},
      {name: "__", tempMinMax: "__", iconCode: "__", uniqueId: 6},
      {name: "__", tempMinMax: "__", iconCode: "__", uniqueId: 7}
    ]
  },

  // Detail() {
  //   // 跳转到应用内的某个页面，当前页面无法返回
  //   router.push({
  //     uri: "/pages/detail"
  //   })
  // },

  // onInit() {
  //   brightness.setKeepScreenOn({
  //     keepScreenOn: true
  //   })
  //   let conn = interconnect.instance()
  //   conn.onmessage = async (data) => {
  //     console.log("Received message:", data)
  //     showToast({message: data, duration: 200})
  //   }
  // },

  onInit() {
    // 检查天气数据文件是否存在
    file.readText({
      uri: "internal://files/weather.txt",
      success: (data) => {
        // 文件存在，解析JSON数据
        try {
          const weatherData = JSON.parse(data.text);

          // 计算更新时间距离现在的时间差
          const updateTime = new Date(weatherData.updateTime);
          const now = new Date();
          const diffMs = now - updateTime;
          const diffMins = Math.floor(diffMs / 60000);
          const diffHours = Math.floor(diffMins / 60);
          const diffDays = Math.floor(diffHours / 24);
          
          let timeAgo;
          if (diffMins < 1) {
            timeAgo = "刚刚";
          } else if (diffMins < 60) {
            timeAgo = diffMins + "分钟前";
          } else if (diffHours < 24) {
            timeAgo = diffHours + "小时前";
          } else {
            timeAgo = diffDays + "天前";
          }

          // 更新当前天气信息
          // 查找当天的数据
          const today = new Date();
          const todayStr = today.toISOString().split('T')[0];
          const todayData = weatherData.daily.find(day => day.fxDate === todayStr) || weatherData.daily[0];
          
          // 如果找不到当天数据，显示提示
          if (!weatherData.daily.find(day => day.fxDate === todayStr)) {
            showToast({message: "今日天气数据不存在", duration: 200});
          }
          
          this.updateTime = timeAgo;
          this.iconCode = todayData.iconDay;
          this.tempMinMax = todayData.tempMin + "°/" + todayData.tempMax + "°";
          
          // 更新天气指标
          this.figure = [
            {name: "紫外线指数", value: todayData.uvIndex, uniqueId: 1},
            {name: "相对湿度 （%）", value: todayData.humidity, uniqueId: 2},
            {name: todayData.windDirDay, value: todayData.windScaleDay, uniqueId: 3},
            {name: "气压 （hPa）", value: todayData.pressure, uniqueId: 4}
          ];
          
          // 更新未来几天天气
          // 根据当天日期动态调整显示
          const currentDate = new Date();
          currentDate.setHours(0, 0, 0, 0); // 设置为当天凌晨
          
          this.dayWeather = weatherData.daily.map((day) => {
            // 根据日期计算星期几
            const date = new Date(day.fxDate);
            date.setHours(0, 0, 0, 0); // 设置为当天凌晨
            const dayOfWeek = date.getDay();
            
            // 计算与今天的日期差
            const timeDiff = date.getTime() - currentDate.getTime();
            const dayDiff = Math.ceil(timeDiff / (1000 * 3600 * 24));
            
            // 星期几的中文表示
            const weekdays = ["周日", "周一", "周二", "周三", "周四", "周五", "周六"];
            
            // 生成显示名称
            let displayName;
            if (dayDiff === 0) {
              displayName = "今天";
            } else if (dayDiff === 1) {
              displayName = "明天";
            } else if (dayDiff === 2) {
              displayName = "后天";
            } else {
              displayName = weekdays[dayOfWeek];
            }
            
            return {
              name: displayName,
              tempMinMax: day.tempMin + "°/" + day.tempMax + "°",
              iconCode: day.iconDay,
              uniqueId: dayDiff + 1
            };
          });
          
          showToast({message: "天气数据已加载", duration: 200});
        } catch (e) {
          console.error("解析天气数据失败:", e);
          showToast({message: "数据格式错误", duration: 200});
        }
      },
      fail: (data, code) => {
        // 文件不存在，提示无天气数据
        showToast({message: "本地无天气数据", duration: 200});
      }
    });
  },

  onShow() {
    connect.onmessage = (data) => {
      showToast({message: data.data, duration: 200})
      // 检查文件是否存在，如果存在则删除
      file.readText({
        uri: "internal://files/weather.txt",
        success: function () {
          // 文件存在
          // 写入空内容来覆盖文件
          file.writeText({
            uri: "internal://files/weather.txt",
            text: data.data,
            success: function () {
              showToast({message: "天气数据已覆盖", duration: 200})
            },
            fail: function (data, code) {
              showToast({message: `天气数据覆盖失败${code}`, duration: 200})
            }
          })
        },
        fail: function (code) {
          // 文件不存在，直接写入
          file.writeText({
            uri: "internal://files/weather.txt",
            text: data.data,
            success: function () {
              showToast({message: "天气数据已保存", duration: 200})
            },
            fail: function (data, code) {
              showToast({message: `天气数据保存失败${code}`, duration: 200})
            }
          })
        }
      })
    }
    connect.onerror = (error) => {
      console.error("Connection error:", error)
    }
    connect.onclose = () => {
      console.log("Connection closed")
      // 尝试重新连接
      setTimeout(() => {
        connect.open()
      }, 5000)
    }
    connect.open()
  },

  onHide() {
    connect.close()
  },

  onDestroy() {
    connect.close()
  }
}
</script>

<style>
@import "../../common/style.css";

.icon-weather {
  width: 85px;
  height: 85px;
  margin-top: 40px;
}

.hero-content {
  flex-direction: column;
  align-items: center;
}

.page-list {
  flex-direction: column;
  padding: 0 12px 12px 12px;
  color: #ffffff;
  background-color: rgba(255, 255, 255, 0.1);
  border-radius: 12px;
}

.temperature {
  font-size: 64px;
  font-weight: bold;
  margin-top: 0px;
  padding-left: 10px;
}

.temp-min-max {
  font-size: 36px;
  font-weight: bold;
  color: rgba(255, 255, 255, 0.8);
  margin-top: 0px;
  padding-left: 6px;
  margin-bottom: 40px;
}

.aqi {
  font-size: 28px;
  font-weight: bold;
  margin-top: 66px;
}

.aqi-desc {
  font-size: 28px;
  font-weight: bold;
  margin-top: 2px;
}

.figure-title {
  font-size: 24px;
  margin-top: 2px;
  color: rgba(255, 255, 255, 0.8);
}

.figure-desc {
  font-size: 39px;
  font-weight: bold;
  margin-left: -1px;
}

.day-weather-title {
  font-size: 28px;
  color: rgba(255, 255, 255, 0.8);
}

.day-weather-desc {
  font-size: 32px;
}

.small-weather-icon {
  width: 48px;
  height: 48px;
}

.button {
  flex-direction: column;
  align-items: center;
  background-color: rgba(255, 255, 255, 0.2);
  padding: 18px 20px;
  border-radius: 50%;
}

.button-text {
  font-size: 29px;
}
</style>
